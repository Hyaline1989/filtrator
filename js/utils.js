// –§–£–ù–ö–¶–ò–ò –û–¢–õ–ê–î–ö–ò
function toggleDebug() {
    debugMode = !debugMode;
    const debugInfo = document.getElementById('debugInfo');
    debugInfo.style.display = debugMode ? 'block' : 'none';
    
    if (debugMode) {
        updateDebugInfoWithVacancyData();
    }
}

function updateDebugInfo(message) {
    const debugInfo = document.getElementById('debugInfo');
    debugInfo.innerHTML += `<div>${new Date().toLocaleTimeString()}: ${message}</div>`;
    debugInfo.scrollTop = debugInfo.scrollHeight;
}

function updateDebugInfoWithVacancyData() {
    const debugInfo = document.getElementById('debugInfo');
    
    let debugHTML = `
        <div style="margin-bottom: 15px;">
            <strong>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets:</strong>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É
    objectsBase.forEach(obj => {
        const vacancyStats = getVacancyStats(obj.name);
        const status = vacancyStats.rawName === '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ' ? '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω' : 
                      vacancyStats.rawName === '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏' ? 'üö´ –û—à–∏–±–∫–∞' : '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω';
        
        debugHTML += `
            <div style="border: 1px solid #ddd; padding: 10px; margin: 5px 0; border-radius: 5px;">
                <strong>${obj.name}</strong> - ${status}
                <div style="font-size: 12px; color: #666;">
                    –ú—É–∂—á–∏–Ω—ã: ${vacancyStats.men} | 
                    –ñ–µ–Ω—â–∏–Ω—ã: ${vacancyStats.women} | 
                    –°–µ–º—å–∏: ${vacancyStats.family}
                </div>
                ${vacancyStats.rawName && vacancyStats.rawName !== '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ' && vacancyStats.rawName !== '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏' ? 
                    `<div style="font-size: 11px; color: #888; margin-top: 3px;">
                        –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å: "${vacancyStats.rawName}"
                    </div>` : ''
                }
            </div>
        `;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalMen = Object.values(vacancyData).reduce((sum, stats) => sum + stats.men, 0);
    const totalWomen = Object.values(vacancyData).reduce((sum, stats) => sum + stats.women, 0);
    const totalFamily = Object.values(vacancyData).reduce((sum, stats) => sum + stats.family, 0);
    const foundCount = Object.values(vacancyData).filter(stats => 
        stats.rawName !== '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ' && stats.rawName !== '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
    ).length;
    
    debugHTML += `
        <div style="margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 5px;">
            <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong><br>
            - –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${foundCount} –∏–∑ ${objectsBase.length}<br>
            - –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: –ú—É–∂—á–∏–Ω—ã ${totalMen} | –ñ–µ–Ω—â–∏–Ω—ã ${totalWomen} | –°–µ–º—å–∏ ${totalFamily}<br>
            - –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${new Date().toLocaleString()}
        </div>
    `;
    
    debugInfo.innerHTML = debugHTML;
    debugInfo.scrollTop = 0;
}

function updateSyncStatus(message) {
    const statusElement = document.getElementById('syncStatus');
    if (statusElement) {
        statusElement.textContent = message;
        
        if (message.includes('‚úÖ') || message.includes('‚ùå')) {
            setTimeout(() => {
                statusElement.textContent = '';
            }, 3000);
        }
    }
}

// –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø
function startAutoUpdate() {
    if (updateInterval) {
        clearInterval(updateInterval);
    }
    
    if (currentAccessLevel === "user") {
        updateInterval = setInterval(async () => {
            await loadSettingsFromServer();
            filterAndDisplayObjects();
            updateSyncStatus('üîÑ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        }, 30000);
    }
}

function stopAutoUpdate() {
    if (updateInterval) {
        clearInterval(updateInterval);
        updateInterval = null;
    }
}

async function manualSync() {
    updateSyncStatus('üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
    await loadSettingsFromServer();
    filterAndDisplayObjects();
    if (currentAccessLevel === "admin") {
        fillMenuWithObjects();
    }
    updateSyncStatus('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
    if (debugMode) {
        updateDebugInfoWithVacancyData();
    }
}