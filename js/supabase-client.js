// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° SUPABASE
async function loadSettingsFromServer() {
    try {
        updateSyncStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
        
        const { data, error } = await supabase
            .from('objects_settings')
            .select('*');
        
        if (error) throw error;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        const { data: orderData, error: orderError } = await supabase
            .from('global_objects_order')
            .select('*')
            .single();
        
        if (!orderError && orderData && orderData.object_order) {
            globalOrder = orderData.object_order;
        } else {
            globalOrder = objectsBase.map(obj => obj.id);
        }
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã
        objects = objectsBase.map(baseObj => {
            const serverSettings = data.find(s => s.id === baseObj.id);
            return {
                ...baseObj,
                visible: serverSettings ? serverSettings.visible : true,
                priority: serverSettings ? serverSettings.priority : false
            };
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
        await loadVacancyData();
        
        updateSyncStatus('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return objects;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        updateSyncStatus('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        objects = objectsBase.map(obj => ({ ...obj, visible: true, priority: false }));
        globalOrder = objectsBase.map(obj => obj.id);
        return objects;
    }
}

async function saveSettingsToServer(objectId, visible, priority) {
    if (currentAccessLevel !== "admin") return;
    
    try {
        const object = objectsBase.find(obj => obj.id === objectId);
        const objectName = object ? object.name : `–û–±—ä–µ–∫—Ç ${objectId}`;
        
        const { error } = await supabase
            .from('objects_settings')
            .upsert({
                id: objectId,
                name: objectName,
                visible: visible,
                priority: priority,
                updated_at: new Date().toISOString()
            });
        
        if (error) throw error;
        
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message);
    }
}

async function saveGlobalOrderToServer() {
    if (currentAccessLevel !== "admin") return;
    
    try {
        updateSyncStatus('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞...');
        
        const { error } = await supabase
            .from('global_objects_order')
            .upsert({
                id: 1,
                object_order: globalOrder,
                updated_at: new Date().toISOString()
            });
        
        if (error) throw error;
        
        hasUnsavedChanges = false;
        updateSaveButtonState();
        updateSyncStatus('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞:', error);
        updateSyncStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞');
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: ' + error.message);
    }
}

async function checkAllObjectsOnServer() {
    if (currentAccessLevel !== "admin") return;
    
    try {
        const updates = objects.map(obj => {
            const baseObj = objectsBase.find(b => b.id === obj.id);
            return {
                id: obj.id,
                name: baseObj ? baseObj.name : `–û–±—ä–µ–∫—Ç ${obj.id}`,
                visible: true,
                priority: obj.priority,
                updated_at: new Date().toISOString()
            };
        });
        
        const { error } = await supabase
            .from('objects_settings')
            .upsert(updates);
        
        if (error) throw error;
        
        objects.forEach(obj => obj.visible = true);
        fillMenuWithObjects();
        filterAndDisplayObjects();
        
        updateSyncStatus('‚úÖ –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        updateSyncStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
}

async function uncheckAllObjectsOnServer() {
    if (currentAccessLevel !== "admin") return;
    
    try {
        const updates = objects.map(obj => {
            const baseObj = objectsBase.find(b => b.id === obj.id);
            return {
                id: obj.id,
                name: baseObj ? baseObj.name : `–û–±—ä–µ–∫—Ç ${obj.id}`,
                visible: false,
                priority: obj.priority,
                updated_at: new Date().toISOString()
            };
        });
        
        const { error } = await supabase
            .from('objects_settings')
            .upsert(updates);
        
        if (error) throw error;
        
        objects.forEach(obj => obj.visible = false);
        fillMenuWithObjects();
        filterAndDisplayObjects();
        
        updateSyncStatus('‚úÖ –í—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å–∫—Ä—ã—Ç—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        updateSyncStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
}